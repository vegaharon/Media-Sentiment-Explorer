#DROP TABLE themes;
CREATE TABLE themes (
    id INT GENERATED BY DEFAULT AS IDENTITY,
    theme_type VARCHAR(15) NOT NULL,
    theme VARCHAR(63) NOT NULL UNIQUE,
    theme_conv VARCHAR(63) NULL UNIQUE,
    description VARCHAR(255) NULL,
    is_active BOOLEAN NOT NULL DEFAULT true,
    PRIMARY KEY(id, theme)
);
\d themes

#DROP TABLE organizations;
CREATE TABLE organizations (
    id INT GENERATED BY DEFAULT AS IDENTITY,
    organization VARCHAR(255) NOT NULL UNIQUE,
    PRIMARY KEY(id, organization)
);
\d organizations

#DROP TABLE persons;
CREATE TABLE persons (
    id INT GENERATED BY DEFAULT AS IDENTITY,
    person VARCHAR(255) NOT NULL UNIQUE,
    PRIMARY KEY(id, person));
\d persons

#DROP TABLE source_collection;
CREATE TABLE source_collection (
    source_collection_id INT GENERATED BY DEFAULT AS IDENTITY,
    source_collection VARCHAR(64) NOT NULL UNIQUE,
    description VARCHAR(1023) NULL,
    PRIMARY KEY(source_collection_id));
\d source_collection
 
INSERT INTO source_collection VALUES (1,'WEB', 'The document originates from the open web and the DocumentIdentifier is a fully-qualified URL that can be used to access the document on the web.');
INSERT INTO source_collection VALUES (2,'Offline citation', 'The document originates from a broadcast, print, or other offline source in which only a textual citation is available for the document. In this case the DocumentIdentifier contains the textual citation for the document.');
INSERT INTO source_collection VALUES (3,'CORE archive', 'The document originates from the CORE archive and the DocumentIdentifier contains its DOI, suitable for accessing the original document through the CORE website.');
INSERT INTO source_collection VALUES (4,'DTIC archive', 'The document originates from the DTIC archive and the DocumentIdentifier contains its DOI, suitable for accessing the original document through the DTIC website.');
INSERT INTO source_collection VALUES (5,'JSTOR archive', 'The document originates from the JSTOR archive and the DocumentIdentifier contains its DOI, suitable for accessing the original document through your JSTOR subscription if your institution subscribes to it.');
INSERT INTO source_collection VALUES (6,'Non-textual source', 'The document originates from a textual proxy \(such as closed captioning\) of a non-textual information source \(such as a video\) available via a URL and the DocumentIdentifier provides the URL of the non-textual original source. At present, this Collection Identifier is used for processing of the closed captioning streams of the Internet Archive Television News Archive in which each broadcast is available via a URL, but the URL offers access only to the video of the broadcast and does not provide any access to the textual closed captioning used to generate the metadata. This code is used in order to draw a distinction between URL-based textual material \(Collection Identifier 1 \(WEB\) and URL-based non-textual material like the Television News Archive\).');

#DROP TABLE tones;
CREATE TABLE tones (
    file_date BIGINT NOT NULL,
    publication_id INT NOT NULL,
    ave_tone FLOAT NULL,
    postivie_score FLOAT NULL,
    negative_score FLOAT NULL,
    polarity FLOAT NULL,
    PRIMARY KEY(file_date, publication_id)
    );
\d tones
,
	

#DROP TABLE staging;
CREATE TABLE staging (
    file_date BIGINT NOT NULL,
    publication_id INT NOT NULL,
    source_collection_id SMALLINT NOT NULL,
    person_id INT NULL,
    person VARCHAR(255) NULL,
    theme_id INT NULL,
    theme VARCHAR(255) NULL,
    organization_id INT NULL,
    organization VARCHAR(511) NULL
	);
\d staging
,
	PRIMARY KEY(file_date, publication_id)

#DROP TABLE gdelt;
CREATE TABLE gdelt (
    file_date BIGINT NOT NULL,
    publication_id INT NOT NULL,
    source_collection_id SMALLINT NOT NULL,
    person_id INT NULL,
    theme_id INT NULL,
    organization_id INT NULL
	);
\d gdelt

#DROP TABLE elections;
CREATE TABLE elections (
    rec_id VARCHAR(255) NOT NULL,
    file_date BIGINT NOT NULL,
    person VARCHAR(255) NULL,
    theme VARCHAR(255) NULL,
    ave_tone FLOAT NULL,
    postivie_score FLOAT NULL,
    negative_score FLOAT NULL,
    polarity FLOAT NULL
	);
\d elections

#DROP TABLE elections_prod;
CREATE TABLE elections_prod (
    file_date TIMESTAMPTZ NOT NULL,
    person VARCHAR(255) NOT NULL,
    theme VARCHAR(255) NULL,
    ave_tone FLOAT NULL,
    postivie_score FLOAT NULL,
    negative_score FLOAT NULL,
    polarity FLOAT NULL
	);
\d elections

#for timescaleDB
SELECT create_hypertable('elections', 'file_date');




